@{
    ViewData["Title"] = "Wykres I";
}

<div class="mb-5 text-center row">
    <div class="col-1">
        <a class="btn btn-small btn-dark" asp-controller="Home" asp-action="HomeIndex">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-double-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
                <path fill-rule="evenodd" d="M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
            </svg>
        </a>
    </div>
    <div class="col-10">
        <h2 class="text-center">Wykres przedstawiający ilość złóżonych zamówień (@ViewBag.Order)</h2>
    </div>
</div>

<div class="chartDiv"> 
    <canvas id="myChart"></canvas>
</div>

<div class="form-check form-switch d-flex justify-content-center mt-5">
  <input class="form-check-input" id="btnLine" type="checkbox">
  <label class="form-check-label ms-2" for="btnLine">Przełącz na wykres liniowy</label>
</div>

<script>
    const ctx = document.getElementById('myChart');

    const pizzaQuantity = @Html.Raw(Json.Serialize(ViewBag.OrderQuantity));
    const months = @Html.Raw(Json.Serialize(ViewBag.MonthsString));

    const myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: months,
            datasets: [{
                label: 'Ilość złożonych zamówień w danym miesiącu',
                data: pizzaQuantity,
                backgroundColor: 'rgba(255,99,132,0.2)',
                borderColor: 'rgba(255,99,132,1)',
                borderWidth: 2,
                hoverBackgroundColor: 'rgba(255,99,132,0.4)',
                hoverBorderColor: 'rgba(255,99,132,1)',
            }],
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1,
                        
                    },
                    grid: {
                        display: true,
                    },
                },
                x: {
                    grid: {
                        display: false,
                    }
                }
            },
            responsive: true,
            onHover: (e) => {

                const points = myChart.getElementsAtEventForMode(e, 'nearest', { intersect: true }, true);

                if(points.length > 0){
                    document.body.style.cursor = "pointer";
                }
                else{
                    document.body.style.cursor = "default";
                }
            },
            onClick: (evt) => {

                const points = myChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);

                if (points.length) {
                    const firstPoint = points[0];
                    var label = myChart.data.labels[firstPoint.index];
                    var value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
                    window.location = "/Administrator/AdministratorChartDetails/" + label;
                }
            }
        }
    });

    const toggle = document.getElementById("btnLine");

    const Line = function(){

        if(myChart.config.type === 'bar'){

            myChart.config.type = 'line';
        }
        else{
            myChart.config.type = 'bar';
        }

        myChart.update();       
    }

    toggle.addEventListener('click', Line)
</script>
